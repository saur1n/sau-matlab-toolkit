%%  Sau MATLAB Colony Analyzer Toolkitv
%
%%  ControlNorm.m

%   Author: Saurin Parikh, March 2018
%   dr.saurin.parikh@gmail.com

%%
    function avg_data = ControlNorm(density,hours,tablename_jpeg,tablename_p2o,p2c_info,cont_name)

        connectSQL;

    %     hours = fetch(conn, sprintf(['select distinct hours from %s ',...
    %         'order by hours asc'], tablename_jpeg));

        n_plates = fetch(conn, sprintf(['select distinct %s from %s a ',...
            'order by %s asc'],...
            p2c_info(2,:),...
            p2c_info(1,:),...
            p2c_info(2,:)));

        if density == 6144
            SM = InterleaveFilter(SpatialMedianControlNorm('window',9));
    %         SM = SpatialMedianControlNorm('window',9);

            for ii = 1:length(hours.hours)
                for iii = 1:length(n_plates.x6144plate)
                    pos.all = fetch(conn, sprintf(['select a.pos ',...
                        'from %s a ',...
                        'where %s = %d ',...
                        'order by %s, %s'],...
                        p2c_info(1,:),...
                        p2c_info(2,:),...
                        n_plates.x6144plate(iii),...
                        p2c_info(3,:),...
                        p2c_info(4,:)));

                    pos.cont = fetch(conn, sprintf(['select a.pos ',...
                        'from %s a, %s b ',...
                        'where a.pos = b.pos and %s = %d and a.orf_name = ''%s'' ',...
                        'order by %s, %s'],...
                        tablename_p2o,...
                        p2c_info(1,:),...
                        p2c_info(2,:),...
                        n_plates.x6144plate(iii),...
                        cont_name,...
                        p2c_info(3,:),...
                        p2c_info(4,:)));

                    avg_data{ii}{iii} = fetch(conn, sprintf(['select a.pos, a.hours, a.replicate1, ',...
                        'a.replicate2, a.replicate3, a.average ',...
                        'from %s a, %s b ',...
                        'where a.pos = b.pos and hours = %d and %s = %d ',...
                        'order by %s, %s'],...
                        tablename_jpeg,...
                        p2c_info(1,:),...
                        hours.hours(ii),...
                        p2c_info(2,:),...
                        n_plates.x6144plate(iii),...
                        p2c_info(3,:),...
                        p2c_info(4,:)));

                    if ~isempty(avg_data{ii}{iii})
                        pos_cont = col2grid(ismember(pos.all.pos, pos.cont.pos));

                        avg_cont = col2grid(avg_data{ii}{iii}.average).*pos_cont;
                        avg_all = col2grid(avg_data{ii}{iii}.average);

                        tmp = avg_cont>prctile(avg_cont(avg_cont>0),1); % removing all (small) outliers
                        avg_cont = avg_cont.*tmp;

                        cont_bg = SM(SM(avg_cont)); %control background per position

                        plate_cn = avg_all./cont_bg; plate_cn_cont = plate_cn.*pos_cont;

                        cont_mode = parzen_mode(plate_cn_cont(plate_cn_cont(:)>0));
                        plate_cn_mn = plate_cn./cont_mode;

                        avg_data{ii}{iii}.csS = grid2row(plate_cn_mn)';
                        avg_data{ii}{iii}.csM = avg_data{ii}{iii}.csS .* avg_data{ii}{iii}.average; 
                    end
                end
            end
        else
            SM = SpatialMedianControlNorm('window',9); 
            for ii = 1:length(hours.hours)
                for iii = 1:length(n_plates.x1536plate)
                    pos.all = fetch(conn, sprintf(['select a.pos ',...
                        'from %s a ',...
                        'where %s = %d ',...
                        'order by %s, %s'],...
                        p2c_info(1,:),...
                        p2c_info(2,:),...
                        n_plates.x1536plate(iii),...
                        p2c_info(3,:),...
                        p2c_info(4,:)));

                    pos.cont = fetch(conn, sprintf(['select a.pos ',...
                        'from %s a, %s b ',...
                        'where a.pos = b.pos and %s = %d and a.orf_name = ''%s'' ',...
                        'order by %s, %s'],...
                        tablename_p2o,...
                        p2c_info(1,:),...
                        p2c_info(2,:),...
                        n_plates.x1536plate(iii),...
                        cont_name,...
                        p2c_info(3,:),...
                        p2c_info(4,:)));

                    avg_data{ii}{iii} = fetch(conn, sprintf(['select a.pos, a.hours, a.replicate1, ',...
                        'a.replicate2, a.replicate3, a.average ',...
                        'from %s a, %s b ',...
                        'where a.pos = b.pos and hours = %d and %s = %d ',...
                        'order by %s, %s'],...
                        tablename_jpeg,...
                        p2c_info(1,:),...
                        hours.hours(ii),...
                        p2c_info(2,:),...
                        n_plates.x1536plate(iii),...
                        p2c_info(3,:),...
                        p2c_info(4,:)));

                    if ~isempty(avg_data{ii}{iii})
                        pos_cont = col2grid(ismember(pos.all.pos, pos.cont.pos));

                        avg_cont = col2grid(avg_data{ii}{iii}.average).*pos_cont;
                        avg_all = col2grid(avg_data{ii}{iii}.average);

                        tmp = avg_cont>prctile(avg_cont(avg_cont>0),1); % removing all (small) outliers
                        avg_cont = avg_cont.*tmp;

                        cont_bg = SM(SM(avg_cont)); %control background per position

                        plate_cn = avg_all./cont_bg; plate_cn_cont = plate_cn.*pos_cont;

                        cont_mode = parzen_mode(plate_cn_cont(plate_cn_cont(:)>0));
                        plate_cn_mn = plate_cn./cont_mode;

                        avg_data{ii}{iii}.csS = grid2row(plate_cn_mn)';
                        avg_data{ii}{iii}.csM = avg_data{ii}{iii}.csS .* avg_data{ii}{iii}.average;
                    end
                end
            end    
        end
        conn(close);
    end
